{"version":3,"sources":["components/InfoBox.jsx","components/LineGraph.jsx","components/Table.jsx","components/util.jsx","components/Map.jsx","App.jsx","index.js"],"names":["console","log","InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","gutterBottom","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetchData","a","fetch","then","response","json","length","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","showDataOnMap","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","TileLayer","attribution","url","Marker","position","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","getCountriesData","name","iso2","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","path","exact","component","document","getElementById"],"mappings":"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","file":"static/js/main.eb214306.chunk.js","sourcesContent":["// import { Card, CardContent,Typography } from \"@material-ui/core\"\r\n\r\n// const InfoBox = ({title,cases,total,active, isRed,...props}) => {\r\n//     return (\r\n//         <Card className={`infoBox ${active && \"infoBox--selected\"} ${\r\n//             isRed && \"infoBox--red\"\r\n//           }`} onClick={props.onClick}>\r\n\r\n//             <CardContent>\r\n//                 <Typography color='textSecondary' className='infoBox__title '>\r\n//                     {title}\r\n//                 </Typography>\r\n//                 <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n//                 <Typography className='infoBox__total'>\r\n//                     {total} total\r\n//                 </Typography>\r\n//             </CardContent>\r\n//         </Card>\r\n//     )\r\n// }\r\n\r\n// export default InfoBox\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\nimport React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./infoBox.css\";\r\nconsole.log()\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n  // console.log(title, active);\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","// import React, { useState, useEffect } from \"react\";\r\n// import { Line } from \"react-chartjs-2\";\r\n// import numeral from \"numeral\";\r\n\r\n// const options = {\r\n//   legend: {\r\n//     visibility:false,\r\n//     display: false,\r\n//     backgroundColor:false,\r\n//   },\r\n//   elements: {\r\n//     point: {\r\n//       radius: 0,\r\n//     },\r\n//   },\r\n//   maintainAspectRatio: false,\r\n//   tooltips: {\r\n//     mode: \"index\",\r\n//     intersect: false,\r\n//     callbacks: {\r\n//       label: function (tooltipItem, data) {\r\n//         return numeral(tooltipItem.value).format(\"+0,0\");\r\n//       },\r\n//     },\r\n//   },\r\n//   scales: {\r\n//     xAxes: [\r\n//       {\r\n//         type: \"time\",\r\n//         time: {\r\n//           format: \"MM/DD/YY\",\r\n//           tooltipFormat: \"ll\",\r\n//         },\r\n//       },\r\n//     ],\r\n//     yAxes: [\r\n//       {\r\n//         gridLines: {\r\n//           display: true,\r\n//         },\r\n//         ticks: {\r\n//           // Include a dollar sign in the ticks\r\n//           callback: function (value, index, values) {\r\n//             return numeral(value).format(\"0a\");\r\n//           },\r\n//         },\r\n//       },\r\n//     ],\r\n//   },\r\n// };\r\n\r\n\r\n// const buildChartData = (data, casesType) => {\r\n//   let chartData = [];\r\n//   let lastDataPoint;\r\n//   // console.log(casesType==='recovered'? casesType:'')\r\n//   for (let date in data.cases) {\r\n   \r\n//     if (lastDataPoint) {\r\n//       let newDataPoint = {\r\n//         x: date,\r\n//         y: data[casesType][date] - lastDataPoint,\r\n//       };\r\n//       chartData.push(newDataPoint);\r\n//     }\r\n//     lastDataPoint = data[casesType][date];\r\n//   }\r\n//   return chartData;\r\n// };\r\n\r\n// function LineGraph({ casesType }) {\r\n//   const [data, setData] = useState({});\r\n//   // console.log(data)\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=all\")\r\n//         .then((response) => {\r\n//           return response.json();\r\n//         })\r\n//         .then((data) => {\r\n//           let chartData = buildChartData(data, casesType);\r\n//           setData(chartData);\r\n//           // console.log(chartData);\r\n//           // buildChart(chartData);\r\n//         });\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, [casesType]);\r\n\r\n//   return (\r\n//     <div>\r\n//       {data?.length > 0 && (\r\n//         <Line\r\n//           className='linegraph'\r\n//           data={{\r\n//             datasets: [\r\n//               {\r\n//                 backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n//                 borderColor: \"red\",\r\n//                 width:'100%',\r\n//                 hiegth:'100%',\r\n//                 data: data,\r\n//               },\r\n//             ],\r\n//           }}\r\n//           options={options}\r\n//         />\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default LineGraph;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// --------------------------------------\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          // console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","// import './table.css'\r\n// import numeral from 'numeral'\r\n// const Table = ({countries}) => {\r\n//     return (\r\n//         <div className='table'>\r\n//             {\r\n//                 countries.map(({country,cases}) =>\r\n//                     <tr>\r\n//                         <td>{country}</td>\r\n//                         <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n//                     </tr>\r\n//     )\r\n//             }\r\n            \r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default Table\r\n\r\n// =====================================================\r\n\r\n\r\n\r\n\r\nimport React from \"react\";\r\nimport \"./table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n\r\n","// import { Circle, Popup } from \"react-leaflet\"\r\n// import numeral from \"numeral\"\r\n// const casesTypeColors = {\r\n    \r\n//     recovered: {\r\n//         hex: \"#7dd71d\",\r\n//         rgb: \"rgb(125, 215, 29)\",\r\n//         half_op: \"rgba(125, 215, 29, 0.5)\",\r\n//         multiplier: 150,\r\n//     },\r\n//     cases: {\r\n//         hex: \"#CC1034\",\r\n//         rgb: \"rgb(204, 16, 52)\",\r\n//         half_op: \"rgba(204, 16, 52, 0.5)\",\r\n//         multiplier: 150,\r\n//     },\r\n//     deaths: {\r\n//         hex: \"#fb4443\",\r\n//         rgb: \"rgb(251, 68, 67)\",\r\n//         half_op: \"rgba(251, 68, 67, 0.5)\",\r\n//         multiplier: 150,\r\n//     },\r\n// };\r\n\r\n\r\n// export const sortData = (data) => {\r\n//     const sortData = [...data]\r\n//     sortData.sort((a, b) => a.cases > b.cases ? -1 : 1)\r\n\r\n//     return sortData\r\n// }\r\n// export const prettyPrintStat = (stat) =>\r\n//   stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n// export const showDataOnMap = (data, casesType) =>\r\n//  (\r\n//   data.map(country =>\r\n//     (\r\n//         <Circle\r\n//             center={[country.countryInfo.lat, country.countryInfo.long]}\r\n//             color={casesTypeColors[casesType].hex}\r\n//             fillColor={casesTypeColors[casesType].hex}\r\n//             // fillColor={'blue'}\r\n//             fillOpacity={0.4}\r\n//             radius={\r\n//                 Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n//             }\r\n//         >\r\n//             <Popup>\r\n//                 <div className=\"info-container\">\r\n//                     <div\r\n//                         className=\"info-flag\"\r\n//                         style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n//                     ></div>\r\n//                     <div className=\"info-name\">{country.country}</div>\r\n//                     <div className=\"info-confirmed\">\r\n//                         Cases: {numeral(country.cases).format(\"0,0\")}\r\n//                     </div>\r\n//                     <div className=\"info-recovered\">\r\n//                         Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n//                     </div>\r\n//                     <div className=\"info-deaths\">\r\n//                         Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n//                     </div>\r\n//                 </div>\r\n//             </Popup>\r\n//         </Circle>\r\n//     )\r\n//     )\r\n// )\r\n\r\n// -------------------------------------------------\r\n\r\nimport React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 150,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 150,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 200,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","// import React from \"react\";\r\n\r\n// import { MapContainer , Marker, TileLayer } from 'react-leaflet'\r\n\r\n// import './map.css'\r\n// import { showDataOnMap } from \"./util\";\r\n\r\n// const Map = ({ center , zoom,countries,casesType }) => {\r\n//     return (\r\n//         <div className='map'>\r\n//             <MapContainer center={center} zoom={zoom} scrollWheelZoom={false}>\r\n//                 <TileLayer\r\n//                     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n//                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//                 />\r\n//                 <Marker position={center} />\r\n//                 {\r\n//                     showDataOnMap(countries ,casesType)\r\n//                 }\r\n//             </MapContainer>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default Map\r\n\r\n\r\n\r\n\r\n\r\nimport React from \"react\";\r\nimport { MapContainer as LeafletMap, Marker, TileLayer , } from \"react-leaflet\";\r\nimport \"./map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n      <TileLayer\r\n      attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n    />\r\n        <Marker position={center} />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n\r\n","// import { useState, useEffect } from 'react';\n// import { Card, CardContent, FormControl, MenuItem, Select } from '@material-ui/core';\n// import numeral from 'numeral';\n// import './App.css';\n// import InfoBox from './components/InfoBox';\n// import Map from './components/Map';\n// import Table from './components/Table'\n// import { sortData } from './components/util';\n// import LineGraph from './components/LineGraph';\n// import \"leaflet/dist/leaflet.css\"\n// import './components/infoBox.css'\n// import { prettyPrintStat } from './components/util'\n\n// function App() {\n//   const [countries, setCountries] = useState([]);\n//   const [country, setCountry] = useState('worldwide');\n//   const [countryInfo, setCountryInfo] = useState({});\n//   const [tableData, setTableData] = useState([])\n//   const [casesType, setCasesType] = useState(\"cases\");\n//   const [mapCenter, setMapCenter] = useState([51.505, -0.09]);\n//   const [mapZoom, setMapZoom] = useState(4);\n//   const [mapCountries, setMapCountries] = useState([]);\n\n//   useEffect(() => {\n\n//     fetch('https://disease.sh/v3/covid-19/all')\n//       .then((response) => response.json())\n//       .then(data => {\n//         setCountryInfo(data)\n//         console.log(data)\n//       })\n\n//   }, [])\n\n\n//   useEffect(() => {\n\n//     const getCountriesData = async () => {\n\n//       await fetch(\"https://disease.sh/v3/covid-19/countries\")\n//         .then(response => response.json())\n//         .then(data => {\n//           const countries = data.map(country => (\n//             {\n//               name: country.country,\n//               value: country.countryInfo.iso2,\n//             }\n\n//           )\n\n//           )\n//           const sortedData = sortData(data);\n//           setTableData(sortedData)\n//           setCountries(countries)\n//           setMapCountries(data)\n\n\n//         })\n//     }\n//     getCountriesData()\n\n//   }, [])\n\n\n//   const onCountryChange = async e => {\n\n//     const countryCode = e.target.value;\n//     setCountry(countryCode);\n\n//     const url = countryCode === 'worldwide' ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode} `;\n//     await fetch(url)\n//       .then(response => response.json())\n//       .then(data => {\n//         setCountry(countryCode)\n//         setCountryInfo(data)\n//         setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n//         setMapZoom(7)\n\n//       })\n\n//     //  console.log(countryInfo)\n//   }\n\n//   // https://disease.sh/v3/covid-19/countries/AF\n//   // ---------------------------------------------------------------------------------------------------------------\n//   return (\n//     <>\n\n//       <div className=\"app\">\n\n\n//         <div className=\"app__left\">\n//           <div className=\"app-header\">\n//             <h1>COVID-19 TRACKER</h1>\n//             <FormControl className='app-dropdown'>\n//               <Select\n//                 variant=\"outlined\"\n//                 value={country}\n//                 onChange={onCountryChange}\n//               >\n//                 <MenuItem value='worldwide'>Worldwide</MenuItem>\n//                 {\n//                   countries.map(country => (\n//                     <MenuItem key={country.name} value={country.value}>{country.name}</MenuItem>\n//                   ))\n//                 }\n//               </Select>\n\n//             </FormControl>\n//           </div>\n//           <div className='app__status'>\n//           <InfoBox\n//             onClick={(e) => setCasesType(\"cases\")}\n//             title=\"Coronavirus Cases\"\n//             isRed\n//             active={casesType === \"cases\"}\n//             cases={prettyPrintStat(countryInfo.todayCases)}\n//             total={numeral(countryInfo.cases).format(\"0.0a\")}\n//           />\n\n\n//             <InfoBox title='Recovered'\n//               cases={prettyPrintStat(countryInfo.todayRecovered)}\n//               total={numeral(countryInfo.recovered).format(\"0.0a\")}\n//               onClick={(e) => setCasesType('recovered')}\n//               active={casesType === \"recovered\"} />\n\n//           <InfoBox\n//             onClick={(e) => setCasesType(\"deaths\")}\n//             title=\"Deaths\"\n//             isRed\n//             active={casesType === \"deaths\"}\n//             cases={prettyPrintStat(countryInfo.todayDeaths)}\n//             total={numeral(countryInfo.deaths).format(\"0.0a\")}\n//           />\n//           </div>\n\n\n//           <Map center={mapCenter} zoom={mapZoom} countries={mapCountries} casesType={casesType}\n//           />\n\n//         </div>\n\n\n//         <Card className=\"app__right\">\n//           <CardContent>\n//             <h2>LIve Cases by Country</h2>\n//             <Table countries={tableData} />\n//             <h3 style={{ marginTop: '20px' }}>Worldwide new cases</h3>\n//             <LineGraph casesType={casesType} />\n//           </CardContent>\n//         </Card>\n\n\n\n\n\n\n//       </div>\n\n//     </>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// ---------------------------------------------------------------------------------\n\n\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport './components/infoBox.css'\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\n// import InfoBox from \"./components/infoBox\";\nimport InfoBox from \"./components/InfoBox\";\nimport LineGraph from \"./components/LineGraph\";\nimport Table from \"./components/Table\";\nimport { sortData, prettyPrintStat } from \"./components/util\";\nimport numeral from \"numeral\";\nimport Map from \"./components/Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  // console.log(casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\"\n// import { BrouserRouter }\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n     <Route path='/covid-19-tracker' exact component={App} />\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}